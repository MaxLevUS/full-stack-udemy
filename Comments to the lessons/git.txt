git log - shows the commits.

git diff "name of the commits - shows the difference between the commits.

git checkout - will get you back to the last version of the commits.

By having a GitHub repository we can get inside any repository in GitHub and get the codes of any website's code published there, for instance repository called FlappyBird. Searching that in the Searching bar. 

Below is the way how to set up remote repository:
git remote add origin https://github.com/MaxLevUS/Story.git
git branch -M main
git push -u origin main

To check you commits history you should proceed the following steps: GitHub repository=>your repository=>Insights=>Network=>and in the middle you will see the line with the history of commits. And also you may track your commits in simplifier method by getting inside your repository, then clicking "commits" button on the right top conner. Then by clicking on a specific commit, you will get all information about changes were done. 

so the working process looks like that:

working directory(git add) => staging Area(git commit(by commit you create the history with the branches, in our case main branch with multiple commits)) => Local repository(git push(all commits will be pushed to the remote repository))


----------Git Ignore---------------------
git rm --cached -r . this command removes all existing files from being pushed to the staging area. 
git commit -m "Removed files from tracking but kept them locally"
PS C:\Users\Windows 11\Desktop\IT\fullstack Udemy\Git class\Project> git rm --cached -r .  
rm '.DS_Store'
rm '.gitignore'
rm 'firstDir.js'
rm 'secondDir.js'
rm 'secrets.js'
rm 'thirdDir.js'
PS C:\Users\Windows 11\Desktop\IT\fullstack Udemy\Git class\Project>

*.txt - all txt files will be ignored
*.log - all log files will be ignored


By creating a new project, we have some files which normally should be ignored. For instance: node files and you can find all files which normally ignored in the GitHub repository called github.com/github/gitignore => file's name "NOde.gitignore. Simply copy the code inside there and paste it in your project's ignore file. 


.gitignore folder should contain all secret file like passwords, API keys and etc. 


---------------git clone---------------------

In the last lesson, we looked at how we can push our local repository to a remote repository on GitHub.

Now, in this lesson, I want to talk about cloning a remote repository on GitHub to pull it onto your

local repository on your machine.

So this is called Cloning and the command is, "git clone".

And this is a way for you to pull down all of the versions and all of the commits of a particular remote

repository and to store the files in your own working directory.

So once you've cloned a repo, you've essentially made a copy of it on your own local working environment

and allows you to stand on the shoulders of giants and continue where they left off. So you won't need

to clone it again during regular development.

You'll continue on your own branch of that project.

So why would you need to clone someone else's project?

Well, it's basically so that you can have your own copy of a program that they wrote.

Maybe you want to customize it to your own needs.

Maybe the program needs to do something it currently doesn't do and you want to extend its functionality.

Or maybe you just found a bug and you want to fix it.

So essentially, it allows you to leverage somebody else's open-source code.

So they're putting their source code out onto the internet and you can simply make a copy of it and

continue where they left off.

For example, a lot of people use self-hosted applications for their business.

These are free versions of products and services you might have to normally pay for, such as productivity

and project management tools that are an alternative to Jira, or Trello, or email servers like MailChimp.

Instead of having to pay MailChimp a ton of money, you can host your own email service or time-tracking

software for freelancers, and there's a ton, a ton literal ton of different options and you can take

a look through that in this GitHub README.

Let's see how it works in practice.

Let's clone some actual repos from GitHub and run them locally to see how the entire process works.

The command is pretty simple.

It's simply git space, clone space,

the URL (git clone 'url'). The URL will typically be from GitHub and it will look something like this.

So what are we going to clone?

Well, did you know that you can run the original Quake video game in your web browser?

It's entirely built in JavaScript, so there will be parts of it that you'll be able to read through

and you'll be able to understand,

but there will be a lot of work that's done to create this game, so...

Thankfully, we don't have to build it from scratch,

all we have to do is just to "git clone".

I go ahead, I grab the URL to clone the repository and in my terminal, I can write git clone and paste

in that URL.

Now, once it receives all of the objects and it gets loaded onto my own computer, then I can go ahead

and cd into the repository quake.js,

and once I'm inside that repository,

I can install all of the NPM packages by running "npm install". And then the next step as they described

in the documentation, is I need to set the "content.quakejs.com" as the content server.

So I'm just going to simply copy this entire line of commands and paste it into my terminal.

Now once I'm done, I can simply run the server using Node by again pasting this line of commands.

And once it starts you can see that web server is now listening on port 8080.

And so now I can go to that port and check out the QuakeJS game.

So making sure that your URL is the same as the one that they have set in their documentation,

go ahead and agree and you'll see once everything's loaded up the original Quake game running on your

browser,

but more importantly, you're running it from the code that you cloned from GitHub.

So feel free to have a play around with the game.

It's pretty cool and it's very retro.

And there you have it.

Now another example is Wordle.

Wordle is basically a word game where you have to guess a five-letter word using just six tries.

And it went completely viral a few years ago and eventually got bought by The New York Times.

And the official Wordle is now accessed at the New York Times alongside all of their different crosswords

and puzzles.

But somebody has created all the code for Wordle, and we can clone it and run it on our own system.

Again, grabbing hold of the URL at the GitHub repository for Word Mastermind, you can see it's entirely

created in JavaScript, HTML and CSS.

So all the things that we know about, we can head back to our terminal, use "git clone" to clone from

that URL, and then again cd into the word-mastermind.

And the reason why they created it is because the original game only allows you to play one word per

day,

but what if you get entirely addicted to Wordle and you want to play more than one word per day?

Well, you're in luck because you know how to clone the program and run it on your own system.

Now all we have to do is just go back, use "npm install" to install all of the required modules,

and once that's done,

we can use the command npm start as they describe in the documentation, and it will show us the location

of our server.

So if we just click on it, open it inside Chrome, you'll see Word Mastermind running in the browser.

Go ahead,

have a guess,

see what you have,

and my personal starting, word top-secret is usually Notes or another word with R and T and S. But

have fun playing with that and you can dig through the code.

You can change it from Word Mastermind to anything else you want to call it.

Or you can change the colors.

You can modify the code base because you now own it on your own computer, and you can run it, and you

can modify it. And you can see just how cool it is to be able to simply clone somebody else's entire

code base that they've made open source for you to continue developing on it.

So look through the code, open it up and take a look inside the dict folder to see all of the available

words.

There's no cheating here.

They've also got other languages, and if you look inside the source folder, you'll be able to see

the actual code that makes this game run.

So you can see it's just simple JavaScript, which you know all about,

and some of these things you might not understand, but through studying somebody else's code and modifying

it, it usually makes you a much better developer.

Go ahead, try to improve your own version, make it a 2.0 Wordle, whatever that means to you.

And this is a big part of your developer journey.

One of the best ways to improve your programming skills is to read other people's code, to understand

what their code is doing, and most importantly, try to modify it just a little bit at the beginning

and maybe a lot more in the future,

but it gives you a way to level up your skill set by building on top of somebody else's work.

And open source code is a great way to get started.

You can clone somebody's repository.

Take a look at some of the more interesting ones that we've listed here, such as Wordle or Quake.

See roughly how things work and see if there are just small things that you might want to change about

it.

And this will lead you onto a very important step on your developer journey, which is contributing

to open source code.

Now there's a lot of projects.

There's even a list of projects on GitHub where they have curated some projects which are particularly

welcoming to first time contributors.

So teams which are open for first timers or beginners to contribute.

And you can take a look at that by going to awesome-for-beginners, this particular repository and take

a look through the README.

Take a look at maybe the AncientBeast game, which is a Turn based strategy game,

or take a look at the Brave Browser which has this concept of rewarding creators with crypto and providing

an alternative to advertisement in browsers.

You can contribute to all of these, but in order to know how to make a contribution, you need to learn

about Pull Requests, Branches and Merging, which is exactly what we'll cover in the upcoming lessons.

So for all of that and more, I'll see you there.

Become a Full-Stack Web Developer with just ONE course. HTML, CSS, Javascript, Node, React, PostgreSQL, Web3 and DApps
Rating: 4.7 out of 5
4.7
406,237 ratings
1,350,898
Students
61.5 hours
Total
Last updated August 2024
English
English, Arabic [Auto]
, 
information alert
Schedule learning time
Learning a little each day adds up. Research shows that students who make learning a habit are more likely to reach their goals. Set time aside to learn and get reminders using your learning scheduler.
By the numbers
Skill level: All Levels
Students: 1350898
Languages: English
Captions: Yes
Lectures: 373
Video: 61.5 total hours
Certificates
Get Udemy certificate by completing entire course

Features
Available on iOS and Android


--------Merging and Branches---------------------

git branch "name of the branch" - to create a new branch.
git checkout "name of the branch" - switch the branches you would like to be on.
